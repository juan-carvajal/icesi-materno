rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function getUserRoleID(){
      return get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roleID
    }
    
    function getRolePermissions(roleID){
    	return exists(/databases/$(database)/documents/roles/$(roleID)) ? get(/databases/$(database)/documents/roles/$(roleID)).data.permissions : []
    }

    function checkAuthorization(requiredPermission) {
    	let roleID = getUserRoleID();
    	let permissions = getRolePermissions(roleID);
      return request.auth.uid != null && (requiredPermission in permissions || 'admin' in permissions)
    }
    
    match /{document=**} {
      allow read, write: if false;
    }

    match /roles/{role} {
      allow read: if request.auth != null;
      allow write: if checkAuthorization('admin')
    }

    match /userRoles/{userRole} {
      allow read: if request.auth != null;
      allow write: if checkAuthorization('admin')
    }
    
    match /podcasts/{podcast} {
      allow read: if request.auth != null;
      allow write: if checkAuthorization('podcasts.write')
    }

    match /cases/{cases} {
      allow read: if checkAuthorization('cases.read');
      allow write: if checkAuthorization('cases.write')
    }

    match /caseComments/{comment} {
      allow read: if checkAuthorization('cases.read');
      allow write: if checkAuthorization('cases.write')
    }

    match /userData/{userUID} {
      allow read: if request.auth != null && request.auth.uid == userUID || checkAuthorization('admin');
      allow write: if request.auth != null && request.auth.uid == userUID || checkAuthorization('admin');
    }
    
    match /notifications/{notification} {
      allow read: if checkAuthorization('notifications.read');
      allow write: if checkAuthorization('notifications.write')
    }

    match /chats/{chat} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      allow update: if request.auth != null && request.auth.
      uid in resource.data.participants;
      allow create: if request.auth != null;


            match /messages/{message} {
              allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chat)).data.participants;
              allow write: if request.auth != null && request.auth.
              uid in get(/databases/$(database)/documents/chats/$(chat)).data.participants;
            }
    }


    match /alerts/{alert} {
      allow read: if checkAuthorization('alerts.read');
      allow write: if checkAuthorization('alerts.write')
    }


  }
}